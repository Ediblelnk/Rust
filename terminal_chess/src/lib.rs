#![allow(non_upper_case_globals)]

use std::io;

pub fn is_white(rank: usize, file: usize) -> usize {
    (rank + file) % 2
}

pub const LAYERS: usize = 5;

pub const WHITE: usize = 1;
pub const BLACK: usize = 0;

pub const E: usize = 0;
pub const p: usize = 1;
pub const n: usize = 2;
pub const b: usize = 3;
pub const r: usize = 4;
pub const q: usize = 5;
pub const k: usize = 6;
pub const P: usize = 7;
pub const N: usize = 8;
pub const B: usize = 9;
pub const R: usize = 10;
pub const Q: usize = 11;
pub const K: usize = 12;

#[rustfmt::skip]
const BOARD_ASCII: [[[&str; 13]; 5]; 2] = [
[
[r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::: _ww_ :::",r"::::\++/::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::: _ww_ :::",r"::::\++/::::"],
[r"::::::::::::",r"::::::::::::",r"::: __,,::::",r":::::<>:::::",r"::::UUUU::::",r"::: \  / :::",r"::::(  )::::",r"::::::::::::",r"::: __,, :::",r":::::<>:::::",r"::::UUUU::::",r"::: \@@/ :::",r"::::(@@)::::"],
[r"::::::::::::",r":::::():::::",r":: L   \~ ::",r":::::/\:::::",r"::::|  |::::",r"::: |  | :::",r"::::|  |::::",r":::::():::::",r":: L@@@\~ ::",r":::::/\:::::",r"::: |@@| :::",r"::: |@@| :::",r"::::|@@|::::"],
[r"::::::::::::",r":::::{}:::::",r":::: ) ( :::",r"::::\  /::::",r"::::|  |::::",r"::: /  \ :::",r"::::/  \::::",r":::: @@ ::::",r":::: )@( :::",r"::: \@@/ :::",r"::: |@@| :::",r"::: /@@\ :::",r"::::/@@\::::"],
[r"::::::::::::",r"::::{__}::::",r":: {____} ::",r":::{____}:::",r":::{____}:::",r":: {____} ::",r":::{____}:::",r"::: {@@} :::",r":: {@@@@} ::",r":: {@@@@} ::",r":: {@@@@} ::",r":: {@@@@} ::",r":::{@@@@}:::"],
],
[
[r"            ",r"            ",r"            ",r"            ",r"            ",r"    _ww_    ",r"    \++/    ",r"            ",r"            ",r"            ",r"            ",r"    _ww_    ",r"    \++/    "],
[r"            ",r"            ",r"    __,,    ",r"     <>     ",r"    UUUU    ",r"    \  /    ",r"    (  )    ",r"            ",r"    __,,    ",r"     <>     ",r"    UUUU    ",r"    \@@/    ",r"    (@@)    "],
[r"            ",r"     ()     ",r"   L   \~   ",r"     /\     ",r"    |  |    ",r"    |  |    ",r"    |  |    ",r"     ()     ",r"   L@@@\~   ",r"     /\     ",r"    |@@|    ",r"    |@@|    ",r"    |@@|    "],
[r"            ",r"     {}     ",r"     ) (    ",r"    \  /    ",r"    |  |    ",r"    /  \    ",r"    /  \    ",r"     @@     ",r"     )@(    ",r"    \@@/    ",r"    |@@|    ",r"    /@@\    ",r"    /@@\    "],
[r"            ",r"    {__}    ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"    {@@}    ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   "],
],
];

const BORDER: [&str; 2] = [
    r".-.================================================================================================.-.",
    r"'-'=========[a]=========[b]=========[c]=========[d]=========[e]=========[f]=========[g]=========[h]'-'",
];

pub struct Chess {
    board: [[usize; 8]; 8],
}

impl Chess {
    pub fn new(board: [[usize; 8]; 8]) -> Self {
        Self { board }
    }

    pub fn move_piece(&self, input: &str) /*-> Result<Self, io::Error> */
    {
        let turn = input
            .split("")
            .filter(|x| !x.is_empty())
            .collect::<Vec<&str>>();
        print!("{:?}", turn);
    }

    pub fn print_board(&self) {
        println!("{}", BORDER[0]);
        for rank in 0..self.board.len() {
            for layer in 0..LAYERS {
                if layer == 0 {
                    print!("[{}]", 8 - rank);
                } else {
                    print!("| |");
                }

                for file in 0..self.board[0].len() {
                    print!(
                        "{}",
                        BOARD_ASCII[is_white(8 - rank, file)][layer]
                            [self.board[rank][file] as usize]
                    );
                }
                println!("| |");
            }
        }
        println!("{}", BORDER[1]);
    }
}

pub fn print_piece(square_color: usize, piece: usize) {
    for i in 0..LAYERS {
        println!("{}", BOARD_ASCII[square_color][i][piece]);
    }
}

pub fn sample_board() -> &'static str {
    r"
.-.================================================================================================.-.
[8]::::::::::::            ::::::::::::    _ww_    ::::\++/::::            ::::::::::::            | |
| |::::UUUU::::    __,,    :::::<>:::::    \  /    ::::(  )::::     <>     ::: __,,::::    UUUU    | |
| |::::|  |::::   L   \~   :::::/\:::::    |  |    ::::|  |::::     /\     :: L   \~ ::    |  |    | |
| |::::|  |::::     ) (    ::::\  /::::    /  \    ::::/  \::::    \  /    :::: ) ( :::    |  |    | |
| |:::{____}:::   {____}   :::{____}:::   {____}   :::{____}:::   {____}   :: {____} ::   {____}   | |
[7]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |     ()     :::::():::::     ()     :::::():::::     ()     :::::():::::     ()     :::::():::::| |
| |     {}     :::::{}:::::     {}     :::::{}:::::     {}     :::::{}:::::     {}     :::::{}:::::| |
| |    {__}    ::::{__}::::    {__}    ::::{__}::::    {__}    ::::{__}::::    {__}    ::::{__}::::| |
[6]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
[5]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
[4]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
[3]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
[2]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |:::: () ::::     ()     :::: () ::::     ()     :::: () ::::     ()     :::: () ::::     ()     | |
| |:::: @@ ::::     @@     :::: @@ ::::     @@     :::: @@ ::::     @@     :::: @@ ::::     @@     | |
| |::: {@@} :::    {@@}    ::: {@@} :::    {@@}    ::: {@@} :::    {@@}    ::: {@@} :::    {@@}    | |
[1]            ::::::::::::            ::: _ww_ :::    \++/    ::::::::::::            ::::::::::::| |
| |    UUUU    ::: __,, :::     <>     ::: \@@/ :::    (@@)    :::: <> ::::    __,,    ::: UUUU :::| |
| |    |@@|    :: L@@@\~ ::     /\     ::: |@@| :::    |@@|    :::: /\ ::::   L@@@\~   ::: |@@| :::| |
| |    |@@|    :::: )@( :::    \@@/    ::: /@@\ :::    /@@\    ::: \@@/ :::     )@(    ::: |@@| :::| |
| |   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::| |
'-'=========[a]=========[b]=========[c]=========[d]=========[e]=========[f]=========[g]=========[h]'-'"
}
